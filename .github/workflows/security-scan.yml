name: Security Scan

on:
  schedule:
    # Run every day at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "high" or .value.severity == "critical")) | length')

          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "❌ Found $HIGH_VULNS high/critical vulnerabilities"
            cat audit-results.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "high" or .value.severity == "critical"))'
            exit 1
          else
            echo "✅ No high/critical vulnerabilities found"
          fi

      - name: Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            audit-results.json
            snyk-results.json

  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Scan for hardcoded secrets
        run: |
          echo "Scanning for potential hardcoded secrets..."

          # Common secret patterns
          if grep -r -E "(password|passwd|pwd)\s*[=:]\s*['\"][^'\"]{8,}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential hardcoded passwords found"
            exit 1
          fi

          if grep -r -E "(api[_-]?key|apikey)\s*[=:]\s*['\"][^'\"]{16,}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential hardcoded API keys found"
            exit 1
          fi

          if grep -r -E "(secret[_-]?key|secretkey)\s*[=:]\s*['\"][^'\"]{16,}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential hardcoded secret keys found"
            exit 1
          fi

          echo "✅ No obvious hardcoded secrets found"

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."
          license-checker --json > licenses.json

          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "LGPL-2.0" "LGPL-2.1" "LGPL-3.0")

          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "❌ Found potentially problematic license: $license"
              grep "$license" licenses.json
              exit 1
            fi
          done

          echo "✅ No problematic licenses found"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, license-scan]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md

          echo "## Dependency Scan" >> security-report.md
          echo "Status: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "" >> security-report.md

          echo "## Secret Detection" >> security-report.md
          echo "Status: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "" >> security-report.md

          echo "## License Compliance" >> security-report.md
          echo "Status: ${{ needs.license-scan.result }}" >> security-report.md
          echo "" >> security-report.md

          if [ "${{ needs.dependency-scan.result }}" = "failure" ] || [ "${{ needs.secret-scan.result }}" = "failure" ] || [ "${{ needs.license-scan.result }}" = "failure" ]; then
            echo "❌ Security scan failed! Please review the results."
          else
            echo "✅ All security scans passed!"
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
